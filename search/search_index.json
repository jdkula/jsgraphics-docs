{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"JSGraphics The JSGraphics library can be used to easily manipulate an HTML5 Canvas, and is used by Stanford's CS106AJ and CS106AX curricula. For students: How to read this documentation This document is intended to read like documentation you might find for any library online. It's a good thing to be able to read it, and see what such documentation might look like. If you're ever working on larger projects, you're very likely to be reading documentation just like this! Because this is likely the first time you're looking at documentation like this, you'll see some notation and vocabulary you haven't seen before. I'll briefly go over this so you this documentation will be useful to you! Vocabulary Some of these definitions may seem scary at first. Don't worry, I'll give an example below. Word Definition Class A blueprint for an object. A class says what an object will contain, and also defines all of its functionality. If an object matches a class, we say that object is an instance of that class. Extends We say that one class extends another if the second class has all the same things as the first class, plus extras or changes (but not deletions). If class B extends class A, we say that B is a subclass of A, and that A is the superclass of B. Abstract Class A class with missing parts. An abstract class says what a subclass will contain, but it doesn't define all of its functionality. You can't really use abstract classes on their own \u2014 you have to use one of their subclasses . Factory Function A function that creates an instance of a class. Method A function that's a part of a class's functionality. You can only call normal methods on instances of a class. Abstract Method A method inside an abstract class that's not defined (i.e. that one of the subclasses must define). Static Method A method that's part of a class , not its instances. You can only call static methods on the class itself. Field (a.k.a. Instance Variable) A variable that's part of a class's instances. Each instance of a class will have its own values for each field, and instances don't share fields. It follows, then that you can only access fields from an instance of a class. Static Field A variable that's part of a class , not its instances. You can only access a static field on the class itself. Const Short for constant . It means the value shouldn't ever be modified. Vocabulary Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 /** * Classes aren't actually a construct inside Javascript. Rather, * they're just the idea of what an instance contains. In this case, * ClassA has three things: x, y, and a function called addTogether that * adds x and y together. */ function ClassA(x, y) { // Our factory function for ClassA. let instance = { // We create our instance here. x : x, // A field (instance variable) y : y, // Another field. addTogether : function () { // A method. return x + y; } }; return instance; } // This is a static method! ClassA.fromString = function (str) { // Makes a ClassA from a string like \"1, 2\" let split = str.split( \",\" ); if (split.length !== 2 ) return null ; let parsedX = parseInt (split[ 0 ].trim()); let parsedY = parseInt (split[ 1 ].trim()); return ClassA(parsedX, parsedY); }; let a1 = ClassA( 1 , 2 ); let a2 = ClassA( 3 , 4 ); console.log(a1.x); // Prints 1 console.log(a1.addTogether()); // Prints 3 console.log(a2.x); // Prints 3 console.log(a2.addTogether()); // Prints 7 // Notice how, even though they're both ClassA's, they have different values? // That's the power of instances! let a3 = ClassA.fromString( \"5, 6\" ); // See how we said ClassA.fromString? That's how you use static methods. console.log(a3.addTogether()); // Prints 11 // Now, you can't call static methods from instances! This will crash! # a1.fromString( \"7, 8\" ); function ClassB(x, y, z) { // Factory function for ClassB let aInstance = ClassA(x, y); // We're extending ClassA here! aInstance.z = z; // See how we're starting with ClassA, then adding a z value... aInstance.addTogether = function () { // ...then changing what addTogether does! return aInstance.x + aInstance.y + aInstance.z; }; return aInstance; } b1 = ClassB( 1 , 2 , 3 ); console.log(b1.addTogether()); // Prints 6 Notation When looking through this documentation, you'll see method definitions that look like this: function ClassName:: methodName (parameter1, parameter2[, optionalParameter=\"default value\"]) This is a description of what this function does. We have two required parameters, and one optional parameter. optionalParemeter has a default value of \"default value\" if you omit it. or this: static function ClassName. staticMethod ([param1=\"\", param2=\"\"[, param3=\"\"]]) We have zero required parameters here! You'll notice that we have brackets in brackets. That just means that if we want to give param3 , we have to also give param1 and param2 . It also means that param1 and param2 have to be together (if you include one, you have to include both. Here's an example: 1 2 3 4 ClassName.staticMethod() // OK! All parameters are optional. ClassName.staticMethod( 1 ) // Won't work! Either both or neither of param1 or param2 need to be specified. ClassName.staticMethod( 1 , 2 ) // OK! param3 is optional, even when param1 and param2 are specified. ClassName.staticMethod( 1 , 2 , 3 ) // OK! We've now given all optional parameters. Something you might notice that you haven't seen before is the :: in ClassName::methodName . This just means that methodName is a method of ClassName , and you can't actually call it directly. Example: 1 2 3 4 5 // Fails -- methodName is a method, so you can't call it directly from the class. # ClassName.methodName( 1 , 2 , \"hi\" ); let anInstance = ClassName(); anInstance.methodName( 1 , 2 , \"hi\" ); // This works! You might notice that staticMethod has a . instead of :: . This is the reverse of what we just saw: 1 2 3 4 5 6 // This works! staticMethod is static, so we call it directly on the class. ClassName.staticMethod( 1 , 2 , \"hi\" ); let anInstance = ClassName(); // This fails! Static methods need to be called on the class. # anInstance.staticMethod( 1 , 2 , \"hi\" );","title":"Home"},{"location":"#jsgraphics","text":"The JSGraphics library can be used to easily manipulate an HTML5 Canvas, and is used by Stanford's CS106AJ and CS106AX curricula.","title":"JSGraphics"},{"location":"#for-students-how-to-read-this-documentation","text":"This document is intended to read like documentation you might find for any library online. It's a good thing to be able to read it, and see what such documentation might look like. If you're ever working on larger projects, you're very likely to be reading documentation just like this! Because this is likely the first time you're looking at documentation like this, you'll see some notation and vocabulary you haven't seen before. I'll briefly go over this so you this documentation will be useful to you!","title":"For students: How to read this documentation"},{"location":"#vocabulary","text":"Some of these definitions may seem scary at first. Don't worry, I'll give an example below. Word Definition Class A blueprint for an object. A class says what an object will contain, and also defines all of its functionality. If an object matches a class, we say that object is an instance of that class. Extends We say that one class extends another if the second class has all the same things as the first class, plus extras or changes (but not deletions). If class B extends class A, we say that B is a subclass of A, and that A is the superclass of B. Abstract Class A class with missing parts. An abstract class says what a subclass will contain, but it doesn't define all of its functionality. You can't really use abstract classes on their own \u2014 you have to use one of their subclasses . Factory Function A function that creates an instance of a class. Method A function that's a part of a class's functionality. You can only call normal methods on instances of a class. Abstract Method A method inside an abstract class that's not defined (i.e. that one of the subclasses must define). Static Method A method that's part of a class , not its instances. You can only call static methods on the class itself. Field (a.k.a. Instance Variable) A variable that's part of a class's instances. Each instance of a class will have its own values for each field, and instances don't share fields. It follows, then that you can only access fields from an instance of a class. Static Field A variable that's part of a class , not its instances. You can only access a static field on the class itself. Const Short for constant . It means the value shouldn't ever be modified.","title":"Vocabulary"},{"location":"#vocabulary-example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 /** * Classes aren't actually a construct inside Javascript. Rather, * they're just the idea of what an instance contains. In this case, * ClassA has three things: x, y, and a function called addTogether that * adds x and y together. */ function ClassA(x, y) { // Our factory function for ClassA. let instance = { // We create our instance here. x : x, // A field (instance variable) y : y, // Another field. addTogether : function () { // A method. return x + y; } }; return instance; } // This is a static method! ClassA.fromString = function (str) { // Makes a ClassA from a string like \"1, 2\" let split = str.split( \",\" ); if (split.length !== 2 ) return null ; let parsedX = parseInt (split[ 0 ].trim()); let parsedY = parseInt (split[ 1 ].trim()); return ClassA(parsedX, parsedY); }; let a1 = ClassA( 1 , 2 ); let a2 = ClassA( 3 , 4 ); console.log(a1.x); // Prints 1 console.log(a1.addTogether()); // Prints 3 console.log(a2.x); // Prints 3 console.log(a2.addTogether()); // Prints 7 // Notice how, even though they're both ClassA's, they have different values? // That's the power of instances! let a3 = ClassA.fromString( \"5, 6\" ); // See how we said ClassA.fromString? That's how you use static methods. console.log(a3.addTogether()); // Prints 11 // Now, you can't call static methods from instances! This will crash! # a1.fromString( \"7, 8\" ); function ClassB(x, y, z) { // Factory function for ClassB let aInstance = ClassA(x, y); // We're extending ClassA here! aInstance.z = z; // See how we're starting with ClassA, then adding a z value... aInstance.addTogether = function () { // ...then changing what addTogether does! return aInstance.x + aInstance.y + aInstance.z; }; return aInstance; } b1 = ClassB( 1 , 2 , 3 ); console.log(b1.addTogether()); // Prints 6","title":"Vocabulary Example:"},{"location":"#notation","text":"When looking through this documentation, you'll see method definitions that look like this: function ClassName:: methodName (parameter1, parameter2[, optionalParameter=\"default value\"]) This is a description of what this function does. We have two required parameters, and one optional parameter. optionalParemeter has a default value of \"default value\" if you omit it. or this: static function ClassName. staticMethod ([param1=\"\", param2=\"\"[, param3=\"\"]]) We have zero required parameters here! You'll notice that we have brackets in brackets. That just means that if we want to give param3 , we have to also give param1 and param2 . It also means that param1 and param2 have to be together (if you include one, you have to include both. Here's an example: 1 2 3 4 ClassName.staticMethod() // OK! All parameters are optional. ClassName.staticMethod( 1 ) // Won't work! Either both or neither of param1 or param2 need to be specified. ClassName.staticMethod( 1 , 2 ) // OK! param3 is optional, even when param1 and param2 are specified. ClassName.staticMethod( 1 , 2 , 3 ) // OK! We've now given all optional parameters. Something you might notice that you haven't seen before is the :: in ClassName::methodName . This just means that methodName is a method of ClassName , and you can't actually call it directly. Example: 1 2 3 4 5 // Fails -- methodName is a method, so you can't call it directly from the class. # ClassName.methodName( 1 , 2 , \"hi\" ); let anInstance = ClassName(); anInstance.methodName( 1 , 2 , \"hi\" ); // This works! You might notice that staticMethod has a . instead of :: . This is the reverse of what we just saw: 1 2 3 4 5 6 // This works! staticMethod is static, so we call it directly on the class. ClassName.staticMethod( 1 , 2 , \"hi\" ); let anInstance = ClassName(); // This fails! Static methods need to be called on the class. # anInstance.staticMethod( 1 , 2 , \"hi\" );","title":"Notation"},{"location":"gmath/","text":"GMath GMath provides a bunch of convenience methods you can use when working with graphics. Methods static function GMath. round (x) Rounds x to the nearest integer. Returns: The rounded integer. static function GMath. sinDegrees (angle) Returns: The sine of the given angle (where angle is in degrees). static function GMath. cosDegrees (angle) Returns: The cosine of the given angle (where angle is in degrees). static function GMath. tanDegrees (angle) Returns: The tangent of the given angle (where angle is in degrees). static function GMath. toDegrees (angle) Converts an angle expressed in radians to degrees. Returns: The degree representation of angle . static function GMath. distance (x, y) Returns: The distance from the origin to the point ( x , y ) static function GMath. distance (x0, y0, x1, y1) Returns: The length of the line from the point ( x0 , y0 ) to ( x1 , y1 ). static function GMath. angle (x, y) Returns: The angle (in degrees) from the origin to the point ( x , y ) static function GMath. angle (x0, y0, x1, y1) Returns: The angle (in degrees) from the point ( x0 , y0 ) to the point ( x1 , y1 ).","title":"GMath"},{"location":"gmath/#gmath","text":"GMath provides a bunch of convenience methods you can use when working with graphics.","title":"GMath"},{"location":"gmath/#methods","text":"static function GMath. round (x) Rounds x to the nearest integer. Returns: The rounded integer. static function GMath. sinDegrees (angle) Returns: The sine of the given angle (where angle is in degrees). static function GMath. cosDegrees (angle) Returns: The cosine of the given angle (where angle is in degrees). static function GMath. tanDegrees (angle) Returns: The tangent of the given angle (where angle is in degrees). static function GMath. toDegrees (angle) Converts an angle expressed in radians to degrees. Returns: The degree representation of angle . static function GMath. distance (x, y) Returns: The distance from the origin to the point ( x , y ) static function GMath. distance (x0, y0, x1, y1) Returns: The length of the line from the point ( x0 , y0 ) to ( x1 , y1 ). static function GMath. angle (x, y) Returns: The angle (in degrees) from the origin to the point ( x , y ) static function GMath. angle (x0, y0, x1, y1) Returns: The angle (in degrees) from the point ( x0 , y0 ) to the point ( x1 , y1 ).","title":"Methods"},{"location":"gobject/","text":"The GObject The GObject is the base object (i.e. the common superclass) for all other graphics objects. Any abstract method seen here can be called on any other (more specific) graphics object, but not on a generic GObject. GObject is an abstract class -- if you try to make one directly, you'll have to fill in the abstract methods. Factory Functions function GObject () Creates an empty GObject . You probably shouldn't be using this. Methods abstract function GObject:: getBounds () Returns a GRectangle representing the smallest box that covers everything this GObject covers. function GObject:: setLocation ([x[, y]]) Sets this GObject's location in the window to ( x , y ). If undefined is passed in instead of a number for either x and/or y , it defaults to the object's current location. function GObject:: getLocation () Returns: A GPoint representing the origin of this object. function GObject:: getX () Returns: The x coordinate of this object's origin. function GObject:: getY () Returns: The y coordinate of this object's origin. function GObject:: move (dx, dy) Moves this object by the displacements dx and dy function GObject:: movePolar (r, theta) Moves this object r units in the direction theta . theta is measured in degrees clockwise from the +x axis . abstract function GObject:: getSize () Returns: The size of this object as a GDimension . abstract function GObject:: getWidth () Returns: The width of this object as a number. abstract function GObject:: getHeight () Returns: The height of this object as a number. abstract function GObject:: contains (x, y) Returns: true if this object contains the given x and y coordinates, and false otherwise. function GObject:: sendToFront () Puts this object on top of all other objects in its attached container. Fails if this object isn't in a container. See Also: GWindow , GCompound function GObject:: sendToBack () Puts this object behind all other objects in its attached container. Fails if this object isn't in a container. See Also: GWindow , GCompound function GObject:: sendForward () Moves this object one \"step\" towards the front of its container. Fails if this object isn't in a container. See Also: GWindow , GCompound function GObject:: sendBackward () Moves this object one \"step\" towards the back of its container. Fails if this object isn't in a container. See Also: GWindow , GCompound function GObject:: setColor (color) Sets the border color of this object. If the object is filled and hasn't been specifically assigned a fill color, also sets the fill color. color may be a predefined Javascript color (e.g. \"Red\" ), or it may be a string in the form \"#RRGGBB , where RR, GG, and BB are the hexadecimal values of the red, green, and blue intensities. function GObject:: getColor () Returns: The color of the object as previously set. function GObject:: setFillColor (color) Sets the fill color of this object specifically. color 's format matches that of GObject::setColor . See Also: GObject::setColor function GObject:: setFilled (flag) Sets this object to be filled if flag is true, or not filled if flag is false. function GObject:: isFilled () Returns: true if this object is filled, false otherwise. function GObject:: setLineWidth (width) Sets this object's lines to be width units wide. function GObject:: getLineWidth () Returns: The width of this object's lines as a number. function GObject:: rotate (theta) Rotates this object by theta degrees around its origin. Marks the object as transformed. function GObject:: scale (multiplier) function GObject:: scale (xMultiplier, yMultiplier) Scales this object. If an individual xMultiplier and yMultiplier are specified, scales the x and y axes differently as specified. If a single multiplier is specified, scales both x and y by that multiplier. Marks the object as transformed. function GObject:: shear (xShear, yShear) Applies an affine shear transformation to this object, using scale factors xShear and yShear . Marks the object as transformed. function GObject:: translate (xTransform, yTransform) Translates the display of the object by xTransform and yTransform before it is displayed, without changing the object's origin. Marks the object as transformed. function GObject:: setVisible (flag) Makes the object visible if flag is true , and invisible if flag is false . function GObject:: isVisible () Returns: true if the object is visible, false otherwise.","title":"The GObject"},{"location":"gobject/#the-gobject","text":"The GObject is the base object (i.e. the common superclass) for all other graphics objects. Any abstract method seen here can be called on any other (more specific) graphics object, but not on a generic GObject. GObject is an abstract class -- if you try to make one directly, you'll have to fill in the abstract methods.","title":"The GObject"},{"location":"gobject/#factory-functions","text":"function GObject () Creates an empty GObject . You probably shouldn't be using this.","title":"Factory Functions"},{"location":"gobject/#methods","text":"abstract function GObject:: getBounds () Returns a GRectangle representing the smallest box that covers everything this GObject covers. function GObject:: setLocation ([x[, y]]) Sets this GObject's location in the window to ( x , y ). If undefined is passed in instead of a number for either x and/or y , it defaults to the object's current location. function GObject:: getLocation () Returns: A GPoint representing the origin of this object. function GObject:: getX () Returns: The x coordinate of this object's origin. function GObject:: getY () Returns: The y coordinate of this object's origin. function GObject:: move (dx, dy) Moves this object by the displacements dx and dy function GObject:: movePolar (r, theta) Moves this object r units in the direction theta . theta is measured in degrees clockwise from the +x axis . abstract function GObject:: getSize () Returns: The size of this object as a GDimension . abstract function GObject:: getWidth () Returns: The width of this object as a number. abstract function GObject:: getHeight () Returns: The height of this object as a number. abstract function GObject:: contains (x, y) Returns: true if this object contains the given x and y coordinates, and false otherwise. function GObject:: sendToFront () Puts this object on top of all other objects in its attached container. Fails if this object isn't in a container. See Also: GWindow , GCompound function GObject:: sendToBack () Puts this object behind all other objects in its attached container. Fails if this object isn't in a container. See Also: GWindow , GCompound function GObject:: sendForward () Moves this object one \"step\" towards the front of its container. Fails if this object isn't in a container. See Also: GWindow , GCompound function GObject:: sendBackward () Moves this object one \"step\" towards the back of its container. Fails if this object isn't in a container. See Also: GWindow , GCompound function GObject:: setColor (color) Sets the border color of this object. If the object is filled and hasn't been specifically assigned a fill color, also sets the fill color. color may be a predefined Javascript color (e.g. \"Red\" ), or it may be a string in the form \"#RRGGBB , where RR, GG, and BB are the hexadecimal values of the red, green, and blue intensities. function GObject:: getColor () Returns: The color of the object as previously set. function GObject:: setFillColor (color) Sets the fill color of this object specifically. color 's format matches that of GObject::setColor . See Also: GObject::setColor function GObject:: setFilled (flag) Sets this object to be filled if flag is true, or not filled if flag is false. function GObject:: isFilled () Returns: true if this object is filled, false otherwise. function GObject:: setLineWidth (width) Sets this object's lines to be width units wide. function GObject:: getLineWidth () Returns: The width of this object's lines as a number. function GObject:: rotate (theta) Rotates this object by theta degrees around its origin. Marks the object as transformed. function GObject:: scale (multiplier) function GObject:: scale (xMultiplier, yMultiplier) Scales this object. If an individual xMultiplier and yMultiplier are specified, scales the x and y axes differently as specified. If a single multiplier is specified, scales both x and y by that multiplier. Marks the object as transformed. function GObject:: shear (xShear, yShear) Applies an affine shear transformation to this object, using scale factors xShear and yShear . Marks the object as transformed. function GObject:: translate (xTransform, yTransform) Translates the display of the object by xTransform and yTransform before it is displayed, without changing the object's origin. Marks the object as transformed. function GObject:: setVisible (flag) Makes the object visible if flag is true , and invisible if flag is false . function GObject:: isVisible () Returns: true if the object is visible, false otherwise.","title":"Methods"},{"location":"gwindow/","text":"The GWindow The GWindow is an HTML5 Canvas that you can use other JSGraphics library functions with. Greatly simplifies the process of working with Canvases. Meant to mimic the graphics libraries from CS106A's Java curriculum. Factory Functions function GWindow () function GWindow (id) function GWindow (width, height) function GWindow (id, width, height) Creates a new GWindow object with a given width / height , and displays it in the given HTML element id . If width or height is unspecified, it will default to 0, 0 (or whatever value is defined in CSS). If id is unspecified, it will default to an element with id JSConsole or the body of the document. Returns: A new GWindow instance. Methods function GWindow:: addEventListener (eventType, listener) Stores an event listener in this GWindow. When the GWindow receives an event of the given eventType , it invokes the listener function. eventType should be a string. listener should be a function that takes no arguments. The following event types are valid: Event Type Description click Invoked when a user finishes clicking, but not dragging, the GWindow. dblclick Invoked when a user double-clicks the GWindow. mousedown Invoked when a user's mouse clicks down on the GWindow. mouseup Invoked when a user's mouse button releases on the GWindow. drag Invoked when a user is holding down their mouse button, and moving their mouse. mousemove Invoked whenever the user moves their cursor. function GWindow:: add (gObject[, x, y]) Adds the specified gObject to the window at the location previously stored in the object. x and y are optional; if they are supplied, then gObject is moved to the specified location. function GWindow:: remove (gObject) Removes the specified gObject from the window. If the object wasn't added to the window, this method has no effect. function GWindow:: clear () Removes all GObjects from the window. Alias : GWindow:: removeAll () function GWindow:: setSize (width, height) Sets the dimensions of the window as specified. function GWindow:: getElementCount () Returns: The number of elements contained in the window. function GWindow:: getElement (index) Returns: The GObject at the specified index (where index 0 was the first GObject added to the window/the GObject farthest back, and the last index is the most recently added/most on top GObject). function GWindow:: getElementAt (x, y) Gets the topmost (i.e. most recently-added) GObject at the specified x / y coordinates. Returns: The found GObject, or null if there's not an object at the specified coordinates. function GWindow:: setAutoRepaintFlag (flag) Changes the setting of the auto-repaint flag. By default, any change to a graphical object contained in this window automatically triggers a repaint of the window as a whole. While this behavior makes it easier to use JSGraphics, it has the disadvantage that repaint requests come much more frequently than necessary. You can disable this feature by calling gwindowObj.setAutoRepaintFlag(false) , but you must then make explicit calls to gwindowObj.repaint() whenever you want to update the display. The advantage of this model is that you can then make many different changes and have them all appear at once with a single repaint call. function GWindow:: getAutoRepaintFlag () Returns: true if the window is set to always auto-repaint, false otherwise. function GWindow:: repaint () Forces the window to repaint itself immediately. function GWindow:: getSize () Returns: The width and height of the window as a GDimension . function GWindow:: getWidth () Returns: The width of the window as a number. function GWindow:: getHeight () Returns: The height of the window as a number. function GWindow:: setScaleFactor (multiplier) Scales the entire window by the a multiplier . The window's scale factor is 1 by default. function GWindow:: getScaleFactor () Returns: The scale factor of the window.","title":"The GWindow"},{"location":"gwindow/#the-gwindow","text":"The GWindow is an HTML5 Canvas that you can use other JSGraphics library functions with. Greatly simplifies the process of working with Canvases. Meant to mimic the graphics libraries from CS106A's Java curriculum.","title":"The GWindow"},{"location":"gwindow/#factory-functions","text":"function GWindow () function GWindow (id) function GWindow (width, height) function GWindow (id, width, height) Creates a new GWindow object with a given width / height , and displays it in the given HTML element id . If width or height is unspecified, it will default to 0, 0 (or whatever value is defined in CSS). If id is unspecified, it will default to an element with id JSConsole or the body of the document. Returns: A new GWindow instance.","title":"Factory Functions"},{"location":"gwindow/#methods","text":"function GWindow:: addEventListener (eventType, listener) Stores an event listener in this GWindow. When the GWindow receives an event of the given eventType , it invokes the listener function. eventType should be a string. listener should be a function that takes no arguments. The following event types are valid: Event Type Description click Invoked when a user finishes clicking, but not dragging, the GWindow. dblclick Invoked when a user double-clicks the GWindow. mousedown Invoked when a user's mouse clicks down on the GWindow. mouseup Invoked when a user's mouse button releases on the GWindow. drag Invoked when a user is holding down their mouse button, and moving their mouse. mousemove Invoked whenever the user moves their cursor. function GWindow:: add (gObject[, x, y]) Adds the specified gObject to the window at the location previously stored in the object. x and y are optional; if they are supplied, then gObject is moved to the specified location. function GWindow:: remove (gObject) Removes the specified gObject from the window. If the object wasn't added to the window, this method has no effect. function GWindow:: clear () Removes all GObjects from the window. Alias : GWindow:: removeAll () function GWindow:: setSize (width, height) Sets the dimensions of the window as specified. function GWindow:: getElementCount () Returns: The number of elements contained in the window. function GWindow:: getElement (index) Returns: The GObject at the specified index (where index 0 was the first GObject added to the window/the GObject farthest back, and the last index is the most recently added/most on top GObject). function GWindow:: getElementAt (x, y) Gets the topmost (i.e. most recently-added) GObject at the specified x / y coordinates. Returns: The found GObject, or null if there's not an object at the specified coordinates. function GWindow:: setAutoRepaintFlag (flag) Changes the setting of the auto-repaint flag. By default, any change to a graphical object contained in this window automatically triggers a repaint of the window as a whole. While this behavior makes it easier to use JSGraphics, it has the disadvantage that repaint requests come much more frequently than necessary. You can disable this feature by calling gwindowObj.setAutoRepaintFlag(false) , but you must then make explicit calls to gwindowObj.repaint() whenever you want to update the display. The advantage of this model is that you can then make many different changes and have them all appear at once with a single repaint call. function GWindow:: getAutoRepaintFlag () Returns: true if the window is set to always auto-repaint, false otherwise. function GWindow:: repaint () Forces the window to repaint itself immediately. function GWindow:: getSize () Returns: The width and height of the window as a GDimension . function GWindow:: getWidth () Returns: The width of the window as a number. function GWindow:: getHeight () Returns: The height of the window as a number. function GWindow:: setScaleFactor (multiplier) Scales the entire window by the a multiplier . The window's scale factor is 1 by default. function GWindow:: getScaleFactor () Returns: The scale factor of the window.","title":"Methods"},{"location":"gobjects/garc/","text":"GArc extends GObject The GArc is a graphical object whose appearance consists of an arc. If unfilled, the arc is simply a portion of the circumference of an ellipse; if filled, the arc is a pie-shaped wedge connected to the center of the figure. Factory Functions function GArc (width, height, start, sweep) function GArc (x, y, width, height, start, sweep) Creates a GArc object consisting of an elliptical arc that fits inside the bounding box specified by x , y , width , and height . If x and y are missing, they default to 0. The start parameter indicates the angle at which the arc begins and is measured in degrees counterclockwise from the +x axis. Thus, a start angle of 0 indicates an arc that begins along the line running eastward from the center, a start angle of 135 begins along the line running northwest, and a start angle of -90 begins along the line running south. The sweep parameter indicates the extent of the arc and is also measured in degrees counterclockwise . A sweep angle of 90 defines a quarter circle extending counterclockwise from the start angle, and a sweep angle of -180 defines a semicircle extending clockwise. Method function GArc:: setStartAngle (angle) Sets the starting angle for this GArc object. function GArc:: getStartAngle () Returns: The starting angle for this GArc. function GArc:: setSweepAngle (angle) Sets the sweep angle for this GArc. function GArc:: getSweepAngle () Returns: The current sweep angle for this GArc. function GArc:: getStartPoint () Returns: The x and y coordinates of where the arc starts as a GPoint . function GArc:: getEndPoint () Returns: The x and y coordinates of where the arc ends as a GPoint . function GArc:: setFrameRectangle (object) Sets this GArc's bounding box to match the given object 's. object must be a GRectangle or a GObject . function GArc:: setFrameRectangle (x, y, width, height) Sets this GArc's bounding box to match the coordinates and dimensions given. function GArc:: getFrameRectangle () Returns: The current bounding box of this GArc, as a GRectangle .","title":"GArc"},{"location":"gobjects/garc/#garc-extends-gobject","text":"The GArc is a graphical object whose appearance consists of an arc. If unfilled, the arc is simply a portion of the circumference of an ellipse; if filled, the arc is a pie-shaped wedge connected to the center of the figure.","title":"GArc extends GObject"},{"location":"gobjects/garc/#factory-functions","text":"function GArc (width, height, start, sweep) function GArc (x, y, width, height, start, sweep) Creates a GArc object consisting of an elliptical arc that fits inside the bounding box specified by x , y , width , and height . If x and y are missing, they default to 0. The start parameter indicates the angle at which the arc begins and is measured in degrees counterclockwise from the +x axis. Thus, a start angle of 0 indicates an arc that begins along the line running eastward from the center, a start angle of 135 begins along the line running northwest, and a start angle of -90 begins along the line running south. The sweep parameter indicates the extent of the arc and is also measured in degrees counterclockwise . A sweep angle of 90 defines a quarter circle extending counterclockwise from the start angle, and a sweep angle of -180 defines a semicircle extending clockwise.","title":"Factory Functions"},{"location":"gobjects/garc/#method","text":"function GArc:: setStartAngle (angle) Sets the starting angle for this GArc object. function GArc:: getStartAngle () Returns: The starting angle for this GArc. function GArc:: setSweepAngle (angle) Sets the sweep angle for this GArc. function GArc:: getSweepAngle () Returns: The current sweep angle for this GArc. function GArc:: getStartPoint () Returns: The x and y coordinates of where the arc starts as a GPoint . function GArc:: getEndPoint () Returns: The x and y coordinates of where the arc ends as a GPoint . function GArc:: setFrameRectangle (object) Sets this GArc's bounding box to match the given object 's. object must be a GRectangle or a GObject . function GArc:: setFrameRectangle (x, y, width, height) Sets this GArc's bounding box to match the coordinates and dimensions given. function GArc:: getFrameRectangle () Returns: The current bounding box of this GArc, as a GRectangle .","title":"Method"},{"location":"gobjects/gcompound/","text":"GCompound extends GObject The GCompound defines a graphical object that consists of a collection of other graphical objects. Once assembled, the internal objects can be manipulated as a unit. Factory Functions function GCompound () function GCompound (x, y) Creates a new GCompound, optionally moving the compound's origin to ( x , y ). Methods function GCompound:: add (gObject[, x= gObject .getX(), y= gObject .getY()]) Adds the given gObject to the compound. If x and y are specified, the gObject 's x and y values are overwritten; otherwise, they're used instead. function GCompound:: remove (gObject) Removes the given @P.gObject from the compound. function GCompound:: removeAll () Removes all GObjects from this GCompound. function GCompound:: getElementCount () Returns: The number of GObjects stored in this GCompound. function GCompound:: getElement (index) Returns: The GObject at the specified index (where index 0 was the first GObject added to the GCompound/the GObject farthest back, and the last index is the most recently added/most on top GObject). function GCompound:: getElementAt (x, y) Gets the topmost (i.e. most recently-added) GObject at the specified x / y coordinates. Returns: The found GObject, or null if there's not an object at the specified coordinates. Note If you need to access elements in a GCompound, it's recommended to append them as additional fields, rather than use GCompound::getElementAt or GCompound::getElement .","title":"GCompound"},{"location":"gobjects/gcompound/#gcompound-extends-gobject","text":"The GCompound defines a graphical object that consists of a collection of other graphical objects. Once assembled, the internal objects can be manipulated as a unit.","title":"GCompound extends GObject"},{"location":"gobjects/gcompound/#factory-functions","text":"function GCompound () function GCompound (x, y) Creates a new GCompound, optionally moving the compound's origin to ( x , y ).","title":"Factory Functions"},{"location":"gobjects/gcompound/#methods","text":"function GCompound:: add (gObject[, x= gObject .getX(), y= gObject .getY()]) Adds the given gObject to the compound. If x and y are specified, the gObject 's x and y values are overwritten; otherwise, they're used instead. function GCompound:: remove (gObject) Removes the given @P.gObject from the compound. function GCompound:: removeAll () Removes all GObjects from this GCompound. function GCompound:: getElementCount () Returns: The number of GObjects stored in this GCompound. function GCompound:: getElement (index) Returns: The GObject at the specified index (where index 0 was the first GObject added to the GCompound/the GObject farthest back, and the last index is the most recently added/most on top GObject). function GCompound:: getElementAt (x, y) Gets the topmost (i.e. most recently-added) GObject at the specified x / y coordinates. Returns: The found GObject, or null if there's not an object at the specified coordinates. Note If you need to access elements in a GCompound, it's recommended to append them as additional fields, rather than use GCompound::getElementAt or GCompound::getElement .","title":"Methods"},{"location":"gobjects/gimage/","text":"GImage extends GObject A graphical representation of an image. Factory Functions function GImage (source[, x=0, y=0]) Constructs a GImage object from the given source . x and y may be specified to set where the GImage should appear in the window; otherwise, it defaults to (0, 0). source may be a Data URL, a local file, or a 2D array of pixels. Note The GImage is loaded asynchronously , meaning that your code will continue to run while the GImage is loading. However, before it's loaded, it does not know its own width or height. If you need to work with these values, it's recommended to add a \"load\" event listener. Methods function GImage:: addEventListener (eventType, listener) Adds the given listener to this image. The only valid eventType is \"load\" \u2014 any other event type will fail silently. The load event triggers when the image has been fully loaded. function GImage:: getPixelArray () Returns: A 2D array of RGBA pixels. You can get the individual color values from these pixels using the methods below. static function GImage. getAlpha (pixel) Returns: The alpha value of the given pixel . static function GImage. getRed (pixel) Returns: The red intensity of the given pixel . static function GImage. getGreen (pixel) Returns: The green intensity of the given pixel . static function GImage. getBlue (pixel) Returns: The blue intensity of the given pixel . static function GImage. createRGBPixel (red, green, blue[, alpha=255]) Returns: A pixel created from the given red , green , blue , and alpha values. If alpha is omitted, defaults to 255 (completely opaque). Warning The functions below will all throw an error if this object has been transformed by GObject::rotate , GObject::scale , GObject::shear , or GObject::translate . function GImage:: setSize (object) Sets this GImage's width/height to match that of the passed-in object of type GDimension , GRectangle , or GObject . function GImage:: setSize (width, height) Sets this GImage's width and height as specified. function GImage:: setBounds (object) Sets this GImage's x/y/width/height to match that of the passed-in object of type GRectangle or GObject . function GImage:: setBounds (positionObject, sizeObject) Sets this GImage's x/y to match that of the passed-in positionObject , and its width/height to match that of the passed-in sizeObject . These objects should be of type GRectangle or GObject . Additionally, positionObject can be a GPoint , and positionObject can be a GDimension . function GImage:: setBounds (x, y, width, height) Sets this GImage's x , y , width , and height as specified.","title":"GImage"},{"location":"gobjects/gimage/#gimage-extends-gobject","text":"A graphical representation of an image.","title":"GImage extends GObject"},{"location":"gobjects/gimage/#factory-functions","text":"function GImage (source[, x=0, y=0]) Constructs a GImage object from the given source . x and y may be specified to set where the GImage should appear in the window; otherwise, it defaults to (0, 0). source may be a Data URL, a local file, or a 2D array of pixels. Note The GImage is loaded asynchronously , meaning that your code will continue to run while the GImage is loading. However, before it's loaded, it does not know its own width or height. If you need to work with these values, it's recommended to add a \"load\" event listener.","title":"Factory Functions"},{"location":"gobjects/gimage/#methods","text":"function GImage:: addEventListener (eventType, listener) Adds the given listener to this image. The only valid eventType is \"load\" \u2014 any other event type will fail silently. The load event triggers when the image has been fully loaded. function GImage:: getPixelArray () Returns: A 2D array of RGBA pixels. You can get the individual color values from these pixels using the methods below. static function GImage. getAlpha (pixel) Returns: The alpha value of the given pixel . static function GImage. getRed (pixel) Returns: The red intensity of the given pixel . static function GImage. getGreen (pixel) Returns: The green intensity of the given pixel . static function GImage. getBlue (pixel) Returns: The blue intensity of the given pixel . static function GImage. createRGBPixel (red, green, blue[, alpha=255]) Returns: A pixel created from the given red , green , blue , and alpha values. If alpha is omitted, defaults to 255 (completely opaque). Warning The functions below will all throw an error if this object has been transformed by GObject::rotate , GObject::scale , GObject::shear , or GObject::translate . function GImage:: setSize (object) Sets this GImage's width/height to match that of the passed-in object of type GDimension , GRectangle , or GObject . function GImage:: setSize (width, height) Sets this GImage's width and height as specified. function GImage:: setBounds (object) Sets this GImage's x/y/width/height to match that of the passed-in object of type GRectangle or GObject . function GImage:: setBounds (positionObject, sizeObject) Sets this GImage's x/y to match that of the passed-in positionObject , and its width/height to match that of the passed-in sizeObject . These objects should be of type GRectangle or GObject . Additionally, positionObject can be a GPoint , and positionObject can be a GDimension . function GImage:: setBounds (x, y, width, height) Sets this GImage's x , y , width , and height as specified.","title":"Methods"},{"location":"gobjects/glabel/","text":"GLabel extends GObject Factory Functions function GLabel (str, [x=0, y=0]) Creates a new GLabel, displaying the given string str . The object's x and y coordinates can also be specified \u2014 if left unspecified, defaults to 0, 0. Methods function GLabel:: setFont (fontStr) Sets this GLabel's font to the font specified by fontStr . fontStr should be using the CSS form of font specification; for example: 24px 'Helvetica Neue' function GLabel:: getFont () Returns: The font this GLabel is currently using. The font is returned in the same format specified in GLabel::setFont . function GLabel:: setLabel (str) Sets this GLabel to display the string specified by str . function GLabel:: getLabel () Returns: The text currently displayed by this GLabel. function GLabel:: getAscent () Returns: The ascent of this font, which is the maximum distance characters extend above the baseline. In JavaScript, this value is estimated from the point size. function GLabel:: getDescent () Returns: the descent of this font, which is the maximum distance characters extend below the baseline. In JavaScript, this value is estimated from the point size. Fields static const GLabel. DEFAULT_FAMILY = \"SansSerif\" Defines the default font family used on a newly-created GLabel. static const GLabel. DEFAULT_SIZE = 12 Defines the default font size used on a newly-created GLabel.","title":"GLabel"},{"location":"gobjects/glabel/#glabel-extends-gobject","text":"","title":"GLabel extends GObject"},{"location":"gobjects/glabel/#factory-functions","text":"function GLabel (str, [x=0, y=0]) Creates a new GLabel, displaying the given string str . The object's x and y coordinates can also be specified \u2014 if left unspecified, defaults to 0, 0.","title":"Factory Functions"},{"location":"gobjects/glabel/#methods","text":"function GLabel:: setFont (fontStr) Sets this GLabel's font to the font specified by fontStr . fontStr should be using the CSS form of font specification; for example: 24px 'Helvetica Neue' function GLabel:: getFont () Returns: The font this GLabel is currently using. The font is returned in the same format specified in GLabel::setFont . function GLabel:: setLabel (str) Sets this GLabel to display the string specified by str . function GLabel:: getLabel () Returns: The text currently displayed by this GLabel. function GLabel:: getAscent () Returns: The ascent of this font, which is the maximum distance characters extend above the baseline. In JavaScript, this value is estimated from the point size. function GLabel:: getDescent () Returns: the descent of this font, which is the maximum distance characters extend below the baseline. In JavaScript, this value is estimated from the point size.","title":"Methods"},{"location":"gobjects/glabel/#fields","text":"static const GLabel. DEFAULT_FAMILY = \"SansSerif\" Defines the default font family used on a newly-created GLabel. static const GLabel. DEFAULT_SIZE = 12 Defines the default font size used on a newly-created GLabel.","title":"Fields"},{"location":"gobjects/gline/","text":"GLine extends GObject Factory Functions function GLine (x0, y0, x1, y1) Creates a new GLine connecting points ( x0 , y0 ) and ( x1 , y1 ). Methods function GLine:: distanceSquared () Returns: The length of this line, squared ( (x_1-x_0)^2 - (y_1-y_0)^2 ). function GLine:: setStartPoint (x, y) Sets the initial point and origin of this line to ( x , y ), without changing the position of the end point. function GLine:: getStartPoint () Returns: The x and y coordinates of the start point as a GPoint . function GLine:: setEndPoint (x, y) Sets the end point of this line to ( x , y ), without changing the position of the start point or the origin. function GLine:: getEndPoint () Returns: The x and y coordinates of the end point as a GPoint .","title":"GLine"},{"location":"gobjects/gline/#gline-extends-gobject","text":"","title":"GLine extends GObject"},{"location":"gobjects/gline/#factory-functions","text":"function GLine (x0, y0, x1, y1) Creates a new GLine connecting points ( x0 , y0 ) and ( x1 , y1 ).","title":"Factory Functions"},{"location":"gobjects/gline/#methods","text":"function GLine:: distanceSquared () Returns: The length of this line, squared ( (x_1-x_0)^2 - (y_1-y_0)^2 ). function GLine:: setStartPoint (x, y) Sets the initial point and origin of this line to ( x , y ), without changing the position of the end point. function GLine:: getStartPoint () Returns: The x and y coordinates of the start point as a GPoint . function GLine:: setEndPoint (x, y) Sets the end point of this line to ( x , y ), without changing the position of the start point or the origin. function GLine:: getEndPoint () Returns: The x and y coordinates of the end point as a GPoint .","title":"Methods"},{"location":"gobjects/goval/","text":"GOval extends GObject Factory Functions function GOval (width, height) function GOval (x, y, width, height) Creates a new GOval that fits into the rectangle of a given width and height . The object's x and y coordinates can also be specified \u2014 if left unspecified, defaults to 0, 0. Methods Warning These functions will all throw an error if this object has been transformed by GObject::rotate , GObject::scale , GObject::shear , or GObject::translate . function GOval:: setSize (object) Sets this GOval's width/height to match that of the passed-in object of type GDimension , GRectangle , or GObject . function GOval:: setSize (width, height) Sets this GOval's width and height as specified. function GOval:: setBounds (object) Sets this GOval's x/y/width/height to match that of the passed-in object of type GRectangle or GObject . function GOval:: setBounds (positionObject, sizeObject) Sets this GOval's x/y to match that of the passed-in positionObject , and its width/height to match that of the passed-in sizeObject . These objects should be of type GRectangle or GObject . Additionally, positionObject can be a GPoint , and positionObject can be a GDimension . function GOval:: setBounds (x, y, width, height) Sets this GOval's x , y , width , and height as specified.","title":"GOval"},{"location":"gobjects/goval/#goval-extends-gobject","text":"","title":"GOval extends GObject"},{"location":"gobjects/goval/#factory-functions","text":"function GOval (width, height) function GOval (x, y, width, height) Creates a new GOval that fits into the rectangle of a given width and height . The object's x and y coordinates can also be specified \u2014 if left unspecified, defaults to 0, 0.","title":"Factory Functions"},{"location":"gobjects/goval/#methods","text":"Warning These functions will all throw an error if this object has been transformed by GObject::rotate , GObject::scale , GObject::shear , or GObject::translate . function GOval:: setSize (object) Sets this GOval's width/height to match that of the passed-in object of type GDimension , GRectangle , or GObject . function GOval:: setSize (width, height) Sets this GOval's width and height as specified. function GOval:: setBounds (object) Sets this GOval's x/y/width/height to match that of the passed-in object of type GRectangle or GObject . function GOval:: setBounds (positionObject, sizeObject) Sets this GOval's x/y to match that of the passed-in positionObject , and its width/height to match that of the passed-in sizeObject . These objects should be of type GRectangle or GObject . Additionally, positionObject can be a GPoint , and positionObject can be a GDimension . function GOval:: setBounds (x, y, width, height) Sets this GOval's x , y , width , and height as specified.","title":"Methods"},{"location":"gobjects/gpolygon/","text":"GPolygon extends GObject Factory Functions function GPolygon ([x=0, y=0]) Creates an empty GPolygon. The object's x and y coordinates can also be specified \u2014 if left unspecified, defaults to 0, 0. Methods function GPolygon:: addVertex (x, y) Adds a vertex at ( x , y ) relative to the polygon's origin. function GPolygon:: addEdge (dx, dy) Adds a vertex at wherever the last point was placed (or 0, 0 if this is the first), shifted by dx and dy . function GPolygon:: addPolarEdge (r, theta) Adds a vertex at wherever the last point was placed (or, 0, 0 if this is the first), shifted by r units in the direction theta . theta is measured in degrees counterclockwise from the +x axis . See Also: GObject::movePolar function GPolygon:: getCurrentPoint () Returns: A GPoint , representing the last point that was added to this GPolygon. See Also: GPoint","title":"GPolygon"},{"location":"gobjects/gpolygon/#gpolygon-extends-gobject","text":"","title":"GPolygon extends GObject"},{"location":"gobjects/gpolygon/#factory-functions","text":"function GPolygon ([x=0, y=0]) Creates an empty GPolygon. The object's x and y coordinates can also be specified \u2014 if left unspecified, defaults to 0, 0.","title":"Factory Functions"},{"location":"gobjects/gpolygon/#methods","text":"function GPolygon:: addVertex (x, y) Adds a vertex at ( x , y ) relative to the polygon's origin. function GPolygon:: addEdge (dx, dy) Adds a vertex at wherever the last point was placed (or 0, 0 if this is the first), shifted by dx and dy . function GPolygon:: addPolarEdge (r, theta) Adds a vertex at wherever the last point was placed (or, 0, 0 if this is the first), shifted by r units in the direction theta . theta is measured in degrees counterclockwise from the +x axis . See Also: GObject::movePolar function GPolygon:: getCurrentPoint () Returns: A GPoint , representing the last point that was added to this GPolygon. See Also: GPoint","title":"Methods"},{"location":"gobjects/grect/","text":"GRect extends GObject A graphical representation of a rectangle. Note Don't confuse GRect with GRectangle . The former is a GObject that you can add to a GWindow ; the latter is a utility type that stores a GObject's bounding box, and cannot be added to a GWindow. Factory Functions function GRect (width, height) function GRect (x, y, width, height) Creates a new GRect of a given width and height . The object's x and y coordinates can also be specified \u2014 if left unspecified, defaults to 0, 0. Methods Warning These functions will all throw an error if this object has been transformed by GObject::rotate , GObject::scale , GObject::shear , or GObject::translate . function GRect:: setSize (object) Sets this GRect's width/height to match that of the passed-in object of type GRectangle or GObject . function GRect:: setSize (width, height) Sets this GRect's width and height as specified. function GRect:: setBounds (object) Sets this GRect's x/y/width/height to match that of the passed-in object of type GRectangle or GObject . function GRect:: setBounds (positionObject, sizeObject) Sets this GOval's x/y to match that of the passed-in positionObject , and its width/height to match that of the passed-in sizeObject . These objects should be of type GRectangle or GObject . Additionally, positionObject can be a GPoint , and positionObject can be a GDimension . function GRect:: setBounds (x, y, width, height) Sets this GOval's x , y , width , and height as specified.","title":"GRect"},{"location":"gobjects/grect/#grect-extends-gobject","text":"A graphical representation of a rectangle. Note Don't confuse GRect with GRectangle . The former is a GObject that you can add to a GWindow ; the latter is a utility type that stores a GObject's bounding box, and cannot be added to a GWindow.","title":"GRect extends GObject"},{"location":"gobjects/grect/#factory-functions","text":"function GRect (width, height) function GRect (x, y, width, height) Creates a new GRect of a given width and height . The object's x and y coordinates can also be specified \u2014 if left unspecified, defaults to 0, 0.","title":"Factory Functions"},{"location":"gobjects/grect/#methods","text":"Warning These functions will all throw an error if this object has been transformed by GObject::rotate , GObject::scale , GObject::shear , or GObject::translate . function GRect:: setSize (object) Sets this GRect's width/height to match that of the passed-in object of type GRectangle or GObject . function GRect:: setSize (width, height) Sets this GRect's width and height as specified. function GRect:: setBounds (object) Sets this GRect's x/y/width/height to match that of the passed-in object of type GRectangle or GObject . function GRect:: setBounds (positionObject, sizeObject) Sets this GOval's x/y to match that of the passed-in positionObject , and its width/height to match that of the passed-in sizeObject . These objects should be of type GRectangle or GObject . Additionally, positionObject can be a GPoint , and positionObject can be a GDimension . function GRect:: setBounds (x, y, width, height) Sets this GOval's x , y , width , and height as specified.","title":"Methods"},{"location":"util/gdimension/","text":"GDimension A utility class to store a width/height pair. Factory Functions function GDimension (dimension) Creates a copy of the given dimension . function GDimension ([width=0, height=0]) Creates a new GDimension with the given width and height . If they are both omitted, defaults to 0 and 0. Methods function GDimension:: getWidth () Returns: The width of this GDimension. function GDimension:: getHeight () Returns: The height of this GDimension. function GDimension:: setSize (dimension) Sets this GDimension to be equal to the given dimension . function GDimension:: setSize (width, height) Sets this GDimension's size to the given width and height ). function GDimension:: getSize () Returns: A copy of this GDimension. Fields GPoint:: width The width component of this GDimension GPoint:: height The height component of this GDimension","title":"GDimension"},{"location":"util/gdimension/#gdimension","text":"A utility class to store a width/height pair.","title":"GDimension"},{"location":"util/gdimension/#factory-functions","text":"function GDimension (dimension) Creates a copy of the given dimension . function GDimension ([width=0, height=0]) Creates a new GDimension with the given width and height . If they are both omitted, defaults to 0 and 0.","title":"Factory Functions"},{"location":"util/gdimension/#methods","text":"function GDimension:: getWidth () Returns: The width of this GDimension. function GDimension:: getHeight () Returns: The height of this GDimension. function GDimension:: setSize (dimension) Sets this GDimension to be equal to the given dimension . function GDimension:: setSize (width, height) Sets this GDimension's size to the given width and height ). function GDimension:: getSize () Returns: A copy of this GDimension.","title":"Methods"},{"location":"util/gdimension/#fields","text":"GPoint:: width The width component of this GDimension GPoint:: height The height component of this GDimension","title":"Fields"},{"location":"util/gpoint/","text":"GPoint A utility class to store an x and y coordinate. Factory Functions function GPoint (point) Creates a copy of the given point . function GPoint ([x=0, y=0]) Creates a new GPoint with the given x and y coordinates. If they are both omitted, defaults to 0, 0 Methods function GPoint:: getX () Returns: The x component of this GPoint. function GPoint:: getY () Returns: The y component of this GPoint. function GPoint:: setLocation (point) Sets this GPoint to be equal to the given point . function GPoint:: setLocation (x, y) Sets this GPoint's location to ( x , y ). function GPoint:: getLocation () Returns: A copy of this GPoint. function GPoint:: translate (dx, dy) Adds dx and dy to the x and y components of this GPoint, respectively. Fields GPoint:: x The x component of this GPoint GPoint:: y The y component of this GPoint","title":"GPoint"},{"location":"util/gpoint/#gpoint","text":"A utility class to store an x and y coordinate.","title":"GPoint"},{"location":"util/gpoint/#factory-functions","text":"function GPoint (point) Creates a copy of the given point . function GPoint ([x=0, y=0]) Creates a new GPoint with the given x and y coordinates. If they are both omitted, defaults to 0, 0","title":"Factory Functions"},{"location":"util/gpoint/#methods","text":"function GPoint:: getX () Returns: The x component of this GPoint. function GPoint:: getY () Returns: The y component of this GPoint. function GPoint:: setLocation (point) Sets this GPoint to be equal to the given point . function GPoint:: setLocation (x, y) Sets this GPoint's location to ( x , y ). function GPoint:: getLocation () Returns: A copy of this GPoint. function GPoint:: translate (dx, dy) Adds dx and dy to the x and y components of this GPoint, respectively.","title":"Methods"},{"location":"util/gpoint/#fields","text":"GPoint:: x The x component of this GPoint GPoint:: y The y component of this GPoint","title":"Fields"},{"location":"util/grectangle/","text":"GRectangle The GRectangle is a utility class representing a bounding box. Note Don't confuse GRect with GRectangle. The former is a GObject that you can add to a GWindow ; the latter is a utility type that stores a GObject's bounding box, and cannot be added to a GWindow. Factory Functions function GRectangle (rect) Creates a copy of the given rect . function GRectangle (x, y, width, height) Creates a GRectangle at ( x , y ) with the given width and height . Methods function GRectangle:: getX () Returns: The x component of this GRectangle's origin. function GRectangle:: getY () Returns: The y component of this GRectangle's origin. function GRectangle:: getWidth () Returns: The width of this GRectangle. function GRectangle:: getHeight () Returns: The height of this GRectangle. function GRectangle:: setLocation (point) Sets this GRectangle to be located at the given point . point can also be another GRectangle, or a GObject ! function GRectangle:: setLocation (x, y) Sets this GRectangle to be located at ( x , y ) function GRectangle:: getLocation () Returns the origin of this rectangle as a GPoint function GRectangle:: setSize (dimension) Sets this GRectangle to be the size of the given dimension . dimension can also be another GRectangle, or a GObject ! function GRectangle:: setSize (width, height) Sets this GRectangle's size to be a given width and height . function GRectangle:: setBounds (object) Sets this GRectangle's x/y/width/height to match that of the passed-in object of type GRectangle or GObject . function GRectangle:: setBounds (positionObject, sizeObject) Sets this GRectangle's x/y to match that of the passed-in positionObject , and its width/height to match that of the passed-in sizeObject . These objects should be of type GRectangle or GObject . Additionally, positionObject can be a GPoint , and positionObject can be a GDimension . function GRectangle:: setBounds (x, y, width, height) Sets this GRectangle's x , y , width , and height as specified. function GRectangle:: contains (x, y) Returns: true if this GRectangle contains the point ( x , y ). false otherwise. function GRectangle:: add (point) Expands this GRectangle to contain the given point . function GRectangle:: add (x, y) Expands this GRectangle to contain the point ( x , y ). function GRectangle:: translate (dx, dy) Adjusts the origin of this GRectangle by the displacements dx , dy .","title":"GRectangle"},{"location":"util/grectangle/#grectangle","text":"The GRectangle is a utility class representing a bounding box. Note Don't confuse GRect with GRectangle. The former is a GObject that you can add to a GWindow ; the latter is a utility type that stores a GObject's bounding box, and cannot be added to a GWindow.","title":"GRectangle"},{"location":"util/grectangle/#factory-functions","text":"function GRectangle (rect) Creates a copy of the given rect . function GRectangle (x, y, width, height) Creates a GRectangle at ( x , y ) with the given width and height .","title":"Factory Functions"},{"location":"util/grectangle/#methods","text":"function GRectangle:: getX () Returns: The x component of this GRectangle's origin. function GRectangle:: getY () Returns: The y component of this GRectangle's origin. function GRectangle:: getWidth () Returns: The width of this GRectangle. function GRectangle:: getHeight () Returns: The height of this GRectangle. function GRectangle:: setLocation (point) Sets this GRectangle to be located at the given point . point can also be another GRectangle, or a GObject ! function GRectangle:: setLocation (x, y) Sets this GRectangle to be located at ( x , y ) function GRectangle:: getLocation () Returns the origin of this rectangle as a GPoint function GRectangle:: setSize (dimension) Sets this GRectangle to be the size of the given dimension . dimension can also be another GRectangle, or a GObject ! function GRectangle:: setSize (width, height) Sets this GRectangle's size to be a given width and height . function GRectangle:: setBounds (object) Sets this GRectangle's x/y/width/height to match that of the passed-in object of type GRectangle or GObject . function GRectangle:: setBounds (positionObject, sizeObject) Sets this GRectangle's x/y to match that of the passed-in positionObject , and its width/height to match that of the passed-in sizeObject . These objects should be of type GRectangle or GObject . Additionally, positionObject can be a GPoint , and positionObject can be a GDimension . function GRectangle:: setBounds (x, y, width, height) Sets this GRectangle's x , y , width , and height as specified. function GRectangle:: contains (x, y) Returns: true if this GRectangle contains the point ( x , y ). false otherwise. function GRectangle:: add (point) Expands this GRectangle to contain the given point . function GRectangle:: add (x, y) Expands this GRectangle to contain the point ( x , y ). function GRectangle:: translate (dx, dy) Adjusts the origin of this GRectangle by the displacements dx , dy .","title":"Methods"},{"location":"util/gtransform/","text":"GTransform This class represents an affine transformation. Essentially, it's a 2 by 2 matrix, plus two fields for an x and y transformation. Applying such a transformation multiplies the vector field that makes up a given GObject by \\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix} ...then transforms the space by (tx, ty) . This class is not intended to be used directly. Every GObject contains one, and its properties may be updated using methods like GObject::shear , etc. Factory Methods function GTransform () Creates a new GTransform with the identity matrix, i.e. \\begin{bmatrix} 1 & 0 \\\\ 0 & 1 \\end{bmatrix} and no transform. function GTransform (transform) Creates a new GTransform that's a copy of the passed-in transform . function GTransform (a, b, c, d[, tx=0, ty=0]) Creates a new GTransform with the following matrix: \\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix} tx and ty can also be specified in the constructor, but default to 0,0. Fields GTransform:: a GTransform:: b GTransform:: c GTransform:: d The matrix values a , b , c , and d , respectively. GTransform:: tx GTransform:: ty The x and y transform values, respectively.","title":"GTransform"},{"location":"util/gtransform/#gtransform","text":"This class represents an affine transformation. Essentially, it's a 2 by 2 matrix, plus two fields for an x and y transformation. Applying such a transformation multiplies the vector field that makes up a given GObject by \\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix} ...then transforms the space by (tx, ty) . This class is not intended to be used directly. Every GObject contains one, and its properties may be updated using methods like GObject::shear , etc.","title":"GTransform"},{"location":"util/gtransform/#factory-methods","text":"function GTransform () Creates a new GTransform with the identity matrix, i.e. \\begin{bmatrix} 1 & 0 \\\\ 0 & 1 \\end{bmatrix} and no transform. function GTransform (transform) Creates a new GTransform that's a copy of the passed-in transform . function GTransform (a, b, c, d[, tx=0, ty=0]) Creates a new GTransform with the following matrix: \\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix} tx and ty can also be specified in the constructor, but default to 0,0.","title":"Factory Methods"},{"location":"util/gtransform/#fields","text":"GTransform:: a GTransform:: b GTransform:: c GTransform:: d The matrix values a , b , c , and d , respectively. GTransform:: tx GTransform:: ty The x and y transform values, respectively.","title":"Fields"}]}